
bin\Debug\UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000019d  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007d  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f5  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013b  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b8  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000dd  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "uart.h"

int main(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62

    USARTInit(103);
  88:	87 e6       	ldi	r24, 0x67	; 103
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 4c 00 	call	0x98	; 0x98 <USARTInit>

    while(1)
    {
        USARTWriteChar('S');
  90:	83 e5       	ldi	r24, 0x53	; 83
  92:	0e 94 7a 00 	call	0xf4	; 0xf4 <USARTWriteChar>
  96:	fc cf       	rjmp	.-8      	; 0x90 <main+0x10>

00000098 <USARTInit>:

#include<avr/io.h>
#include<util/delay.h>

void USARTInit(uint16_t ubrr_value)
{
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	00 d0       	rcall	.+0      	; 0x9e <USARTInit+0x6>
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	9a 83       	std	Y+2, r25	; 0x02
  a4:	89 83       	std	Y+1, r24	; 0x01
    UBRR0L = ubrr_value;
  a6:	e4 ec       	ldi	r30, 0xC4	; 196
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	80 83       	st	Z, r24
    UBRR0H = (ubrr_value>>8)&0x00ff;
  ae:	e5 ec       	ldi	r30, 0xC5	; 197
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	9a 81       	ldd	r25, Y+2	; 0x02
  b6:	89 2f       	mov	r24, r25
  b8:	99 27       	eor	r25, r25
  ba:	80 83       	st	Z, r24
    UCSR0C = (1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);
  bc:	e2 ec       	ldi	r30, 0xC2	; 194
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	86 e4       	ldi	r24, 0x46	; 70
  c2:	80 83       	st	Z, r24

    UCSR0B=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	88 ed       	ldi	r24, 0xD8	; 216
  ca:	80 83       	st	Z, r24
}
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	08 95       	ret

000000d6 <USARTReadChar>:

char USARTReadChar()
{
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62

    while(!(UCSR0A&(1<<RXC0)))
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 23       	and	r24, r24
  e6:	dc f7       	brge	.-10     	; 0xde <USARTReadChar+0x8>
    {
        //Do nothing
    }
    return UDR0;
  e8:	e6 ec       	ldi	r30, 0xC6	; 198
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <USARTWriteChar>:

void USARTWriteChar(char data)
{
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	0f 92       	push	r0
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A&(1<<UDRE0)))
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	80 72       	andi	r24, 0x20	; 32
 10c:	90 70       	andi	r25, 0x00	; 0
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	b9 f3       	breq	.-18     	; 0x100 <USARTWriteChar+0xc>
    {
        //Do nothing
    }
    UDR0=data;
 112:	e6 ec       	ldi	r30, 0xC6	; 198
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	80 83       	st	Z, r24
}
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>

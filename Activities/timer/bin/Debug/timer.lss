
bin\Debug\timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001ea  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000001ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000055  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000014f  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e1  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013d  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ac  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>

unsigned volatile overflow;

int main(void)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1<<PD6);
  98:	aa e2       	ldi	r26, 0x2A	; 42
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	ea e2       	ldi	r30, 0x2A	; 42
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8c 93       	st	X, r24
    PORTD |= (1<<PD6); //LED
  a6:	ab e2       	ldi	r26, 0x2B	; 43
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	eb e2       	ldi	r30, 0x2B	; 43
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8c 93       	st	X, r24
    TCCR0B |= (1<<CS02);
  b4:	a5 e4       	ldi	r26, 0x45	; 69
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e5 e4       	ldi	r30, 0x45	; 69
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	8c 93       	st	X, r24
    TIMSK0 |= (1<<TOIE0); // Timer mask for interrupt
  c2:	ae e6       	ldi	r26, 0x6E	; 110
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ee e6       	ldi	r30, 0x6E	; 110
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	8c 93       	st	X, r24
    TCNT0 = 0;
  d0:	e6 e4       	ldi	r30, 0x46	; 70
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
    overflow =0;
  d6:	10 92 01 01 	sts	0x0101, r1
  da:	10 92 00 01 	sts	0x0100, r1
    sei();
  de:	78 94       	sei


    while(1)
    {
        if(overflow>=12)
  e0:	80 91 00 01 	lds	r24, 0x0100
  e4:	90 91 01 01 	lds	r25, 0x0101
  e8:	8c 30       	cpi	r24, 0x0C	; 12
  ea:	91 05       	cpc	r25, r1
  ec:	c8 f3       	brcs	.-14     	; 0xe0 <main+0x50>
        {
            if(TCNT0>=52)
  ee:	e6 e4       	ldi	r30, 0x46	; 70
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	84 33       	cpi	r24, 0x34	; 52
  f6:	a0 f3       	brcs	.-24     	; 0xe0 <main+0x50>
            {
                PORTD ^= (1<<PD6);
  f8:	ab e2       	ldi	r26, 0x2B	; 43
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	eb e2       	ldi	r30, 0x2B	; 43
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	80 e4       	ldi	r24, 0x40	; 64
 104:	89 27       	eor	r24, r25
 106:	8c 93       	st	X, r24
                TCNT0 = 0;
 108:	e6 e4       	ldi	r30, 0x46	; 70
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	10 82       	st	Z, r1
                overflow = 0;
 10e:	10 92 01 01 	sts	0x0101, r1
 112:	10 92 00 01 	sts	0x0100, r1
 116:	e4 cf       	rjmp	.-56     	; 0xe0 <main+0x50>

00000118 <__vector_16>:

    return 0;
}

ISR(TIMER0_OVF_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
    overflow++;
 12e:	80 91 00 01 	lds	r24, 0x0100
 132:	90 91 01 01 	lds	r25, 0x0101
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	90 93 01 01 	sts	0x0101, r25
 13c:	80 93 00 01 	sts	0x0100, r24
}
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
